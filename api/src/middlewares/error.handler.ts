import { Error } from 'mongoose';
import { Boom } from '@hapi/boom';
import { ValidationError } from 'joi';
import { MongoError } from 'mongodb';
import type { NextFunction, Request, Response } from 'express';
import { badRequest, conflict, internal, notFound } from '@hapi/boom';

/**
 * The errorHandler function in TypeScript handles errors by sending a 500 status code along with the
 * error name and message in a JSON response.
 * @param {Error} err - The `err` parameter is an Error object that represents the error that occurred
 * in the application. It contains information about the error such as the error name and message.
 * @param {Request} req - Request object containing information about the HTTP request. It includes
 * properties such as headers, body, query parameters, and more.
 * @param {Response} res - The `res` parameter in the `errorHandler` function is the response object in
 * Express.js. It is used to send a response back to the client making the request. In the provided
 * code snippet, it is used to set the status code to 500 and send a JSON response with details about
 * @param {NextFunction} next - The `next` parameter in the errorHandler function is a reference to
 * the next middleware function in the Express middleware chain. It is used to pass control to the next
 * middleware function. If an error occurs in the current middleware function, calling
 * `next` with the error object will skip to the next middleware function.
 */
export function errorHandler(err: Error, req: Request, res: Response, next: NextFunction) {
  res.status(500).json({
    statusCode: 500,
    error: err.name,
    message: err.message,
  });
}

/**
 * The `boomErrorHandler` function handles Boom errors by sending the appropriate status code and
 * payload in the response.
 * @param {Boom} err - The `err` parameter in the `boomErrorHandler` function is of type `Boom`, which
 * is likely an error object generated by the Boom library in Node.js. This object contains information
 * about the error, such as status code and payload.
 * @param {Request} _req - The `_req` parameter in the `boomErrorHandler` function is of type
 * `Request`, which is typically used to represent the HTTP request in Express.js or other Node.js
 * frameworks. It contains information about the incoming request such as headers, body, query
 * parameters, etc.
 * @param {Response} res - The `res` parameter in the `boomErrorHandler` function is the response
 * object in Express.js. It is used to send a response back to the client with the specified status
 * code and payload.
 * @param {NextFunction} next - The `next` parameter in the `boomErrorHandler` function is a callback
 * function that is used to pass control to the next middleware function in the stack. If an error is
 * not a Boom error, the function calls `next(err)` to pass the error to the next error-handling
 * middleware in the chain.
 */
export function boomErrorHandler(err: Boom, _req: Request, res: Response, next: NextFunction) {
  if (err.isBoom) {
    const { output } = err;
    res.status(output.statusCode).json(output.payload);
  } else {
    next(err);
  }
}

/**
 * The function `joiErrorHandler` handles Joi validation errors by sending a 400 status response with
 * error details.
 * @param {ValidationError} err - The `err` parameter is of type `ValidationError`, which is an error
 * object thrown by the Joi validation library in JavaScript.
 * @param {Request} _req - The `_req` parameter in the `joiErrorHandler` function is of type `Request`,
 * which is typically used to represent the HTTP request in Express.js or similar frameworks. It
 * contains information about the incoming request such as headers, body, query parameters, etc. This
 * parameter allows the function to access
 * @param {Response} res - The `res` parameter in the `joiErrorHandler` function is an instance of the
 * Express Response object. It is used to send a response back to the client with the specified status
 * code, headers, and body content. In this case, it is being used to send a JSON response with a
 * @param {NextFunction} next - The `next` parameter in the `joiErrorHandler` function is a callback
 * function that is used to pass control to the next middleware function in the stack. If there is an
 * error that is not an instance of `ValidationError`, the `next` function is called with the error
 * object to pass the
 */
export function joiErrorHandler(err: ValidationError, _req: Request, res: Response, next: NextFunction) {
  if (err instanceof ValidationError) {
    res.status(400).json({
      statusCode: 400,
      error: err.name,
      message: err.message,
    });
  } else {
    next(err);
  }
}

/**
 * The function `mongooseErrorHandler` handles various types of errors that can occur in a MongoDB
 * application and returns appropriate HTTP responses.
 * @param {Error | MongoError} err - The `err` parameter in the `mongooseErrorHandler` function is the
 * error object that is being passed to the error handler. It can be either an `Error` object or a
 * `MongoError` object. The function checks the type of error and handles it accordingly based on the
 * specific error type.
 * @param {Request} req - The `req` parameter in the `mongooseErrorHandler` function stands for the
 * incoming request object in Express.js. It contains information about the HTTP request made to the
 * server, such as headers, parameters, body, and query parameters. This parameter is used to access
 * and manipulate the request data within the error
 * @param {Response} res - The `res` parameter in the `mongooseErrorHandler` function is the response
 * object in Express.js. It is used to send a response back to the client with the specified status
 * code and payload.
 * @param {NextFunction} next - The `next` parameter in the `mongooseErrorHandler` function is a
 * reference to the next middleware function in the application's request-response cycle. It is a
 * callback function that is called when the current middleware has completed its task. By calling
 * `next()`, the application can pass control to the next middleware
 * @returns The function `mongooseErrorHandler` is returning a response with appropriate status codes
 * and error messages based on the type of error encountered. It handles different types of errors such
 * as CastError, ValidationError, DocumentNotFoundError, and MongoServerError. If the error is not one
 * of these specific types, it returns a generic internal server error message.
 */
export function mongooseErrorHandler(err: Error | MongoError, req: Request, res: Response, next: NextFunction) {
  // Handle CastError (invalid ObjectId)
  if (err.name === 'CastError') {
    res.status(400).json(badRequest('Invalid ID format').output.payload);
    return
  }

  // Handle ValidationError
  if (err.name === 'ValidationError') {
    res.status(400).json(badRequest(err.message).output.payload);
    return
  }

  // Handle DocumentNotFoundError
  if (err.name === 'DocumentNotFoundError') {
    res.status(404).json(notFound('Document not found').output.payload);
    return
  }

  // Handle MongoServerError (includes duplicate key errors)
  if (err.name === 'MongoServerError') {
    // Handle duplicate key error
    if ('code' in err && err.code === 11000) {
      res.status(409).json(conflict('Duplicate key error').output.payload);
      return
    }

    res.status(500).json(internal('MongoDB server error').output.payload);
    return
  }

  // For all other errors, use Boom's internal server error
  res.status(500).json(internal('An unexpected error occurred').output.payload);
  return
}
